{"ast":null,"code":"import multer from 'multer';\nimport nextConnect from 'next-connect';\nimport path from 'path';\nimport fs from 'fs';\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: './public/uploads',\n    filename: (req, file, cb) => cb(null, file.originalname)\n  })\n});\nconst apiRoute = nextConnect({\n  onError(error, req, res) {\n    res.status(501).json({\n      error: `Sorry something Happened! ${error.message}`\n    });\n  },\n\n  onNoMatch(req, res) {\n    res.status(405).json({\n      error: `Method '${req.method}' Not Allowed`\n    });\n  }\n\n});\nconst uploadMiddleware = upload.single('image');\napiRoute.post(uploadMiddleware, async (req, res) => {\n  const url = req.file.path.replace('public', '');\n  return res.status(201).json({\n    url\n  });\n});\napiRoute.get(async (req, res) => {\n  try {\n    fs.opendir('./public/uploads', async (err, dir) => {\n      if (err) {\n        return res.json({\n          message: err.message\n        });\n      }\n\n      if (dir) {\n        const file = (await dir.read()).name;\n        const result = {\n          _id: '1',\n          name: file,\n          size: '123',\n          url: path.resolve(__dirname, 'uploads', file)\n        };\n        return res.json(result);\n      }\n    });\n  } catch (error) {\n    return res.json({\n      message: 'Nenhuma imagem encontrada'\n    });\n  }\n});\napiRoute.delete((req, res) => {\n  try {\n    const {\n      fileName\n    } = req.query;\n    fs.rm(`./public/uploads/${fileName}`, async () => {\n      return res.json({\n        message: 'Imagem apagada com sucesso!'\n      });\n    });\n  } catch (error) {\n    return res.json({\n      message: 'Nenhuma imagem encontrada'\n    });\n  }\n});\nexport default apiRoute;\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};","map":{"version":3,"sources":["/home/jackson/www/github/simulador_plm/src/pages/api/upload.ts"],"names":["multer","nextConnect","path","fs","upload","storage","diskStorage","destination","filename","req","file","cb","originalname","apiRoute","onError","error","res","status","json","message","onNoMatch","method","uploadMiddleware","single","post","url","replace","get","opendir","err","dir","read","name","result","_id","size","resolve","__dirname","delete","fileName","query","rm","config","api","bodyParser"],"mappings":"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","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport multer from 'multer'\nimport nextConnect from 'next-connect'\nimport path from 'path'\nimport fs from 'fs'\n\ninterface IReq extends NextApiRequest {\n\tfile?: {\n\t\tfieldname: string\n\t\toriginalname: string\n\t\tencoding: string\n\t\tmimetype: string\n\t\tdestination: string\n\t\tfilename: string\n\t\tpath: string\n\t\tsize: number\n\t}\n}\n\nconst upload = multer({\n\tstorage: multer.diskStorage({\n\t\tdestination: './public/uploads',\n\t\tfilename: (req, file, cb) => cb(null, file.originalname)\n\t})\n})\n\nconst apiRoute = nextConnect<NextApiRequest, NextApiResponse>({\n\tonError(error, req: NextApiRequest, res: NextApiResponse) {\n\t\tres\n\t\t\t.status(501)\n\t\t\t.json({ error: `Sorry something Happened! ${error.message}` })\n\t},\n\tonNoMatch(req: NextApiRequest, res: NextApiResponse) {\n\t\tres.status(405).json({ error: `Method '${req.method}' Not Allowed` })\n\t}\n})\n\nconst uploadMiddleware = upload.single('image')\n\napiRoute.post(uploadMiddleware, async (req: IReq, res: NextApiResponse) => {\n\tconst url = req.file.path.replace('public', '')\n\treturn res.status(201).json({\n\t\turl\n\t})\n})\n\napiRoute.get(async (req: NextApiRequest, res: NextApiResponse) => {\n\ttry {\n\t\tfs.opendir('./public/uploads', async (err, dir) => {\n\t\t\tif (err) {\n\t\t\t\treturn res.json({ message: err.message })\n\t\t\t}\n\n\t\t\tif (dir) {\n\t\t\t\tconst file = (await dir.read()).name\n\n\t\t\t\tconst result = {\n\t\t\t\t\t_id: '1',\n\t\t\t\t\tname: file,\n\t\t\t\t\tsize: '123',\n\t\t\t\t\turl: path.resolve(__dirname, 'uploads', file)\n\t\t\t\t}\n\n\t\t\t\treturn res.json(result)\n\t\t\t}\n\t\t})\n\t} catch (error) {\n\t\treturn res.json({ message: 'Nenhuma imagem encontrada' })\n\t}\n})\n\napiRoute.delete((req: NextApiRequest, res: NextApiResponse) => {\n\ttry {\n\t\tconst { fileName } = req.query\n\n\t\tfs.rm(`./public/uploads/${fileName}`, async () => {\n\t\t\treturn res.json({ message: 'Imagem apagada com sucesso!' })\n\t\t})\n\t} catch (error) {\n\t\treturn res.json({ message: 'Nenhuma imagem encontrada' })\n\t}\n})\n\nexport default apiRoute\n\nexport const config = {\n\tapi: {\n\t\tbodyParser: false\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}